% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mimu.R
\name{plot.mimu}
\alias{plot.mimu}
\title{Plot Wavelet Variances}
\usage{
\method{plot}{mimu}(
  obj_list,
  split_plot = FALSE,
  add_legend = TRUE,
  xlab = NULL,
  ylab = NULL,
  col_wv = NULL,
  col_ci = NULL,
  nb_ticks_x = NULL,
  nb_ticks_y = NULL,
  legend_position = "bottomleft",
  ci_wv = NULL,
  point_cex = NULL,
  point_pch = NULL,
  names = NULL,
  transparency_wv = NULL,
  transparency_ci = NULL
)
}
\arguments{
\item{add_legend}{A \code{bolean} that detemines if a legend is added to the plot.}

\item{xlab}{A \code{string} that gives a title for the x axis.}

\item{ylab}{A \code{string} that gives a title for the y axis.}

\item{col_wv}{A \code{vector} that specifies the color of the wavelet variance line.}

\item{col_ci}{A \code{vector} that specifies the color of the confidence interval polygon.}

\item{nb_ticks_x}{An \code{integer} that specifies the maximum number of ticks for the x-axis.}

\item{nb_ticks_y}{An \code{integer} that specifies the maximum number of ticks for the y-axis.}

\item{legend_position}{A \code{string} that specifies the position of the legend (use \code{legend_position = NA} to remove legend).}

\item{ci_wv}{A \code{boolean} that determines whether a confidence interval polygon will be drawn.}

\item{point_cex}{A \code{double} that specifies the size of each symbol to be plotted.}

\item{point_pch}{A \code{double} that specifies the symbol type to be plotted.}

\item{transparency_wv}{An \code{integer} that specifies the tranparency for the wavelet variance lines.}

\item{transparency_ci}{An \code{integer} that specifies the tranparency for the wavelet variance confidence intervals.}

\item{x}{A \code{mimu} object.}

\item{split}{A \code{bolean} that determines if the wavelet variances are splitted in different plot windows.}
}
\value{
Plot of wavelet variances and confidence intervals for each scale.
}
\description{
Displays a plot of wavelet variances accounting for CI values.
}
\examples{
Xt = rnorm(n/4)
Yt = rnorm(n/2) + cumsum(rnorm(n/2, 0, 10^(-2)))
Zt = rnorm(n) + cumsum(rnorm(n, 0, 10^(-3)))
obj = make_mimu(Xt, Yt, Zt, freq = 100, unit = "s",
sensor.name = "MTiG - Gyro. X", exp.name = c("today", "yesterday", "a few days ago"))
plot(obj, split_plot = FALSE)
}
\author{
Stephane Guerrier, Nathanael Claussen, Gaetan Bakalli and Justin Lee
}
\keyword{internal}
