% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mgmwm.R
\name{mgmwm}
\alias{mgmwm}
\title{Multivariate Generalized Method of Wavelet Moments (MGMWM) for IMUs}
\usage{
mgmwm(
  mimu,
  model = NULL,
  CI = FALSE,
  alpha_ci = NULL,
  n_boot_ci_max = NULL,
  stationarity_test = FALSE,
  B_stationarity_test = 30,
  alpha_near_test = NULL,
  seed = 2710
)
}
\arguments{
\item{mimu}{A \code{mimu} object.}

\item{model}{A \code{ts.model} object containing one of the allowed models.}

\item{CI}{A \code{bolean} to compute the confidence intervals for estimated parameters.}

\item{alpha_ci}{A \code{double} between 0 and 1 that correspondings to the
\eqn{\frac{\alpha}{2}}{alpha/2} value for the parameter
confidence intervals.}

\item{n_boot_ci_max}{A \code{double} representing the maximum number of bootstrap replicates
for parameters confidence intervals computaion.}

\item{stationarity_test}{A \code{bolean} to compute the near-stationarity test.}

\item{B_stationarity_test}{A \code{double} representing the number of bootstrap replicates.
for near-stationarity test computation.}

\item{alpha_near_test}{A \code{double} between 0 and 1 that correspondings to the
rejection region for the p value in the near-stationarity test}

\item{seed}{An \code{integer} that controls the reproducibility of the
auto model selection phase.}
}
\value{
A \code{mgmwm} object with the structure:
\describe{
 \item{estimates}{Estimated Parameters Values from the MGMWM Procedure}
 \item{wv_empir}{The data's empirical wavelet variance}
 \item{ci_low}{Lower Confidence Interval}
 \item{ci_high}{Upper Confidence Interval}
 \item{obj_fun}{Value of the objective function at Estimated Parameter Values}
 \item{theo}{Summed Theoretical Wavelet Variance}
 \item{decomp.theo}{Decomposed Theoretical Wavelet Variance by Process}
 \item{scales}{Scales of the GMWM Object}
 \item{model.type}{Models being guessed}
 \item{alpha}{Alpha level used to generate confidence intervals}
 \item{model}{\code{ts.model} supplied to gmwm}
 \item{model.hat}{A new value of \code{ts.model} object supplied to gmwm}
}
}
\description{
Performs estimation of time series models by using the GMWM estimator.
}
\details{
This function is under work. Some of the features are active. Others... Not so much.

The V matrix is calculated by:
\eqn{diag\left[ {{{\left( {Hi - Lo} \right)}^2}} \right]}{diag[(Hi-Lo)^2]}.

The function is implemented in the following manner:
1. Calculate MODWT of data with levels = floor(log2(data))
2. Apply the brick.wall of the MODWT (e.g. remove boundary values)
3. Compute the empirical wavelet variance (WV Empirical).
4. Obtain the V matrix by squaring the difference of the WV Empirical's Chi-squared confidence interval (hi - lo)^2
5. Optimize the values to obtain \eqn{\hat{\theta}}{theta^hat}
6. If FAST = TRUE, return these results. Else, continue.

Loop  k = 1 to K
Loop h = 1 to H
7. Simulate xt under \eqn{F_{\hat{\theta}}}{F_theta^hat}
8. Compute WV Empirical
END
9. Calculate the covariance matrix
10. Optimize the values to obtain \eqn{\hat{\theta}}{theta^hat}
END
11. Return optimized values.


The function estimates a variety of time series models. If type = "imu" or "ssm", then
parameter vector should indicate the characters of the models that compose the latent or state-space model. The model
options are:
\describe{
  \item{"AR1"}{a first order autoregressive process with parameters \eqn{(\phi,\sigma^2)}{phi, sigma^2}}
  \item{"GM"}{a guass-markov process \eqn{(\beta,\sigma_{gm}^2)}{beta, sigma[gm]^2}}
  \item{"DR"}{a drift with parameter \eqn{\omega}{omega}}
  \item{"QN"}{a quantization noise process with parameter \eqn{Q}}
  \item{"RW"}{a random walk process with parameter \eqn{\sigma^2}{sigma^2}}
  \item{"WN"}{a white noise process with parameter \eqn{\sigma^2}{sigma^2}}
}
}
\examples{
# AR
set.seed(1336)
n = 200
data = gen_gts(n, AR1(phi = .99, sigma2 = 0.01) + WN(sigma2 = 1))

# Models can contain specific parameters e.g.
adv.model = gmwm(AR1(phi = .99, sigma2 = 0.01) + WN(sigma2 = 0.01),
                            data)

# Or we can guess the parameters:
guided.model = gmwm(AR1() + WN(), data)

# Want to try different models?
guided.ar1 = gmwm(AR1(), data)

# Faster:
guided.ar1.wn.prev = update(guided.ar1, AR1()+WN())

# OR

# Create new GMWM object.
# Note this is SLOWER since the Covariance Matrix is recalculated.
guided.ar1.wn.new = gmwm(AR1()+WN(), data)

}
